
  <div class="col-12 flex-column align-center justify-center flex-no-wrap" id="home-div">

<div class="display-flex justify-center" id="welcome-div"><h4>Welcome to your budget app, {{user.username}}!</h4></div>


{{#if user.saving_goals}}
<div><p>Here are your saving goals!!</p></div>
{{/if}}

<div class="col-6 chart" id="pie-chart-div">
    <p>Budget Breakdown:</p>
     <canvas id="pie-chart" width="200" height="200"></canvas>
</div>

<div class="col-6 chart" id="double-chart-div">
    <p>Expenses:</p>
     <canvas id="double-chart" width="300" height="300"></canvas>
</div>


</div>
<script src=" /js/main.js"></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js'></script> 
<script src="/js/home.js"></script>
<script>
const ctx = document.getElementById('pie-chart')
const pieChart = new Chart(ctx, {
    type: 'pie',
    data: {
        labels: [
            'Housing',
            'Insurance',
            'Transportation',
            'Food',
            'Savings',
            'Utilities',
            'Personal'
          ],
        datasets: [{
            label: 'Budget Breakdown',
            // will need to change data variables once it is more clear how this data will be returned
            data: [{{user.income.salary}} * {{user.budget.housing}} / 100, {{user.budget.insurance}}, {{user.budget.transportation}}, {{user.budget.food}}, {{user.budget.savings}}, {{user.budget.utilities}}, {{user.budget.personal}}],
           backgroundColor: [
            'rgba(236, 112, 99, 0.35)',
            'rgba(165, 105, 189, 0.35)',
            'rgba(93, 173, 226, 0.35)',
            'rgba(69, 179, 157, 0.35)',
            'rgba(88, 214, 141, 0.35)',
            'rgba(245, 176, 65, 0.35)',
            'rgba(220, 118, 51, 0.35)'
          ],
          borderColor: [
            'rgba(236, 112, 99, 1)',
            'rgba(165, 105, 189, 1)',
            'rgba(93, 173, 226, 1)',
            'rgba(69, 179, 157, 1)',
            'rgba(88, 214, 141, 1)',
            'rgba(245, 176, 65, 1)',
            'rgba(220, 118, 51, 1)'
          ],
            borderWidth: 1
        }]
    },
    options: {
      responsive: true
  }
});
async function setExpenseData() {
let expense = await getExpenses()
const ctxOverlay = document.getElementById('double-chart');
const doubleChart = new Chart(ctxOverlay, {
    data: {
        labels: [
          'Housing',
          'Insurance',
          'Transportation',
          'Food',
          'Savings',
          'Utilities',
          'Personal'
        ],
        datasets: [{
          type: 'bar',
          label: 'Budget',
          // will need to change data variables once it is more clear how this data will be returned
          data: [{{user.budget.housing}}, {{user.budget.insurance}}, {{user.budget.transportation}}, {{user.budget.food}}, {{user.budget.savings}}, {{user.budget.utilities}}, {{user.budget.personal}}],
          backgroundColor: [
            'rgba(236, 112, 99, 0.35)',
            'rgba(165, 105, 189, 0.35)',
            'rgba(93, 173, 226, 0.35)',
            'rgba(69, 179, 157, 0.35)',
            'rgba(88, 214, 141, 0.35)',
            'rgba(245, 176, 65, 0.35)',
            'rgba(220, 118, 51, 0.35)'
          ],
          borderColor: [
            'rgba(236, 112, 99, 1)',
            'rgba(165, 105, 189, 1)',
            'rgba(93, 173, 226, 1)',
            'rgba(69, 179, 157, 1)',
            'rgba(88, 214, 141, 1)',
            'rgba(245, 176, 65, 1)',
            'rgba(220, 118, 51, 1)'
          ],
            borderWidth: 1
        }, {
          type: 'line',
          label: 'Expenses',
          // will need to create a function to add up each individual expense
          data: [expense.housing, expense.insurance, expense.transportation, expense.food, expense.savings, expense.utilities, expense.personal],
          fill: true,
          borderColor: 'rgb(54, 162, 235)'
        }]
      },
      options: {
          responsive: true
      }
}); 
}
setExpenseData()
</script>

<script src=" /js/main.js"></script>